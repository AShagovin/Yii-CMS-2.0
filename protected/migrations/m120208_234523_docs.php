<?php
class m120208_234523_docs extends CDbMigration
{
	public function up()
	{
		$this->execute("-- phpMyAdmin SQL Dump
-- version 3.2.3
-- http://www.phpmyadmin.net
--
-- Хост: localhost
-- Время создания: Фев 09 2012 г., 02:45
-- Версия сервера: 5.1.40
-- Версия PHP: 5.3.3

SET SQL_MODE=\"NO_AUTO_VALUE_ON_ZERO\";

--
-- БД: `yii_base`
--

-- --------------------------------------------------------

--
-- Структура таблицы `documentation`
--

CREATE TABLE IF NOT EXISTS `documentation` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(250) DEFAULT '' COMMENT 'Название',
  `alias` varchar(250) DEFAULT NULL COMMENT 'Алиас',
  `lft` int(11) DEFAULT NULL,
  `rgt` int(11) DEFAULT NULL,
  `depth` int(11) DEFAULT NULL,
  `is_published` tinyint(1) unsigned DEFAULT '1' COMMENT 'Опубликован',
  `content` text COMMENT 'Контент',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT='Категории документации' AUTO_INCREMENT=27 ;

--
-- Дамп данных таблицы `documentation`
--

INSERT INTO `documentation` (`id`, `title`, `alias`, `lft`, `rgt`, `depth`, `is_published`, `content`) VALUES
(1, 'root', 'root', 1, 18, 1, 1, NULL),
(2, 'Компоненты', 'applicationComponents', 2, 7, 2, 1, NULL),
(3, 'Поведения', 'behaviors', 8, 13, 2, 1, NULL),
(4, 'Соглашения', 'conventions', 14, 23, 2, 1, NULL),
(5, 'Хэлперы', 'helpers', 24, 25, 2, 1, NULL),
(6, 'Введение', 'introductions', 26, 27, 2, 1, NULL),
(7, 'О главном', 'main', 28, 37, 2, 1, NULL),
(8, 'Специальные темы', 'special', 38, 41, 2, 1, NULL),
(9, 'Модули', 'modules', 42, 49, 2, 1, NULL),
(10, 'Контент', 'content', 43, 44, 3, 1, '#Модуль: content (контент)\r\n\r\nМодуль служит для предоставления базового функционала приложения.\r\n- меню\r\n- статические страницы\r\n- виджеты обработки текста\r\n\r\n##Модели\r\n\r\n- `Menu` - Меню\r\n- `MenuSection` - Отдельная ссылка в меню. NestedSet - дерево с множеством корней.\r\n- `Page` - Статическая страница.\r\n- `PageBlock` - Блок текста. Используются они для вывода текста,\r\n    который встречается в одном месте, и не зависит от других моделей. Например: Seo-тексты\r\n\r\n##Портлеты\r\n\r\n**Truncate**\r\n\r\nОбрезает `\$content` используя плагин [jTruncate](http://www.jeremymartin.name/projects.php?project=jTruncate)\r\n~~~\r\n[php]\r\n\$this->widget(''content.portlets.Truncate'', array(\r\n    ''id'' => ''index_text'',\r\n    ''content'' => \$content\r\n    ''options'' => array(\r\n        ''length'' => 1200\r\n    )\r\n))\r\n~~~\r\n\r\n**TopMenu**\r\n\r\nПортлет для создания основного меню навигации, содержит несколько алгоритмов определения текущего активного пункта меню.\r\n\r\n**NestedTree**\r\n\r\nИспользуется для реализаци сортировки `NestedSet` деревьев.\r\n\r\nПример использования:\r\n\r\n~~~\r\n[php]\r\n\$this->widget(''content.portlets.NestedTree'', array(\r\n    ''model''    => MenuSection::model(),\r\n    ''sortable'' => true,\r\n    ''root_id''  => \$root_id,\r\n    ''id''       => ''category_sorting''\r\n));\r\n~~~'),
(11, 'Файловый менеджер', 'fileManager', 45, 46, 3, 1, '[#big]\r\n#Модуль: FileManager\r\n\r\nМодуль содержащий в себе классы для загрузки, отображения, изменения файлов. Основная цель -\r\nразграничение логики хранения файлов на жестком диске и их использованием(пользователь не знает\r\nгде на самом деле хранятся файлы).\r\nЭто позволяет ограничивать доступ к файлам и отдавать на скачивание под любым именем.\r\n\r\n##Портлеты\r\n\r\n**Uploader**\r\n\r\nЛюбой модели вы можете добавить функциональность загрузки произвольного количества файлов.\r\n\r\n- Добавьте в модель поведение:\r\n~~~\r\n[php]\r\n''FileManager''     => array(\r\n     ''class''          => ''application.components.activeRecordBehaviors.AttachmentBehavior'',\r\n     ''attached_class'' => ''FileManager''\r\n),\r\n~~~\r\n\r\n- Добавьте в модель relation:\r\n~~~\r\n[php]\r\n''files''    => array(\r\n    self::HAS_MANY,\r\n    ''FileManager'',\r\n    ''object_id'',\r\n    ''condition'' => ''files.model_id = \"'' . get_class(\$this) . ''\" AND files.tag=\"files\"'',\r\n    ''order''     => ''files.order DESC''\r\n)\r\n//здесь tag - это группа файлов(тег). вы можете разделить файлы на группы (изображения, файлы, видео).\r\n//Тогда для каждой группы нужно будет прописать свой relation.\r\n//Задавайте одинаковые имена для relation и тега. Это упростит вам работу.\r\n~~~\r\n\r\n- Добавьте в форму элемент для массовой загрузки файлов:\r\n~~~\r\n[php]\r\n''files'' => array(                  //здесь files - имя relaion, которое вы задали в модели\r\n    ''type''      => ''file_manager'',\r\n    ''data_type'' => ''any'',           //допустимые форматы файлов для загрузки. any|document|image|sound|video\r\n    ''title''     => ''Фото объектов'',\r\n    ''tag''       => ''files''         //здесь тоже\r\n)\r\n~~~\r\n\r\n\r\n**FileList**\r\n\r\nВывести загруженные файлы можно с помощью виджета:\r\n~~~\r\n[php]\r\n\$this->widget(''fileManager.portlets.FileList'', array(\r\n    ''model'' => \$model,\r\n    ''tag'' => ''files''\r\n))\r\n~~~\r\nВиджет уже содержит css стили и иконки форматов файлов\r\n\r\n\r\n'),
(12, 'Глоссарий', 'glossary', 47, 48, 3, 1, '#Модуль: glossary (глоссарий)\r\n\r\nМодуль аналогичен модулю новостей, однако для ориентирования по записям здесь используется\r\nнавигация ввиде алфавита и символа ''#''(все записи)\r\n\r\nПри воходе в конкретную букву будут отображаться только записи заданный атрибут которых начинается\r\nс этой буквы(обычно это title)\r\n\r\n\r\n##Модель Glossary\r\n\r\n- `public function onlyFirstChars(\$field)` - scope, после использования которого вернутся вместо\r\n    обычных моделей, модель в поле `letter` которой будет назодиться первая буква заданного поля `\$field`\r\n- `public static function noEmptyChars(\$field)` - Возвращает массив букв для которых есть записи\r\n- `public function getLastNoEmptyChar(\$field)` - Возвращает первую непустую букву\r\n\r\n##Доступные компоненты\r\n\r\nЗа основу альфа-навигации взят набор компонентов [alphapager](http://www.yiiframework.com/extension/alphapager/)\r\n\r\nОднако этот набор компонентов может работать только с одним языком.\r\nДля реализации мультиязычности был изменен компонент `ApPagination`.\r\nВ него были добавлены поля:\r\n- `public static \$alphabet` - набор алфавитов\r\n- `public static \$langs` - набор языков\r\n\r\nА так же методы:\r\n- `public static function getAllLetters(\$toDropDown = false)` - Возвращает массив из всех языков\r\n- `public static function getWordIndex(\$word)` - Возвращает индекс буквы которой принадлежит это слово.\r\n     Исправляет проблемы с мультибайтными кодировками\r\n- `public static function getFirstLetter(\$word)` - Возвращает первую букву слова, с учетом мультибайтных кодировок\r\n\r\n##Поддержка нескольких языков\r\n\r\nДля поддержки мультиязычности созданы 2 компонента: **`MultilangApLinkPager`**, **`MultilangApListView`**\r\nИх использование ничем не отличается от аналогичных `Yii` компонентов.\r\n\r\n'),
(13, 'Система', 'main', 23, 24, 3, 1, '#Модуль: main (главный системный модуль)\r\n\r\nЭтот модуль обеспечивает за поддержку:\r\n\r\n- Мультиязычности\r\n- Мета-теги\r\n- Логирование\r\n\r\n##Модели\r\n\r\n- `Language` - Язык, соответственно есть возможность добавлять новые языки.\r\n- `Log` - Логи\r\n- `MetaTag` - Метатеги, эта модель может быть подключена к любой другой модели через `relation`.\r\n- `Setting` - Глобальные настройки сайта (параметры подключения к серверу отправки почты и т.п.)\r\n\r\n**Settings**\r\n\r\n- `public static function getValue(\$code)` - Возвращает значение настроеки по ее коду.\r\n- `public static function checkRequired(\$codes, \$module_id = null)` - проверяет на наличие всех\r\n    настроек для заданного модуля в БД. Это можно испольовать при написании компонентов, для того,\r\n    что бы напомнить программисту, какие установки нужно добавить для корректной его работы.\r\n\r\n**MetaTag**\r\n\r\nМодель которую можно прикрпить к любой `AR` одели с помощью `relation`. Это достигается за счет того, что\r\nдля каждой записи в БД `MetaTag` хранит `model_id` - имя класса модели-владельца метатегов, `object_id` -\r\n`id` класса модели-владельца метатегов. Типичный вид таблици БД для метатегов:\r\n\r\nmodel_id   |   object_id    |  title\r\n-----------|----------------|-------------------------\r\nNews       |    1           |  Первая новость\r\nNews       |    2           |  Вторая новость\r\nPage       |    7           |  Страница учета\r\nPage       |    5           |  Страница обратной связи\r\n\r\n\r\nДля любого экземпляра модели `News` мы можем однозначно получить объект с метаданными, но обычно это не\r\nтребуется, т.к. нужные метаданные подставляются в `HTML` автоматически.\r\n\r\n\r\n**Log**\r\n\r\nЛогирование происходит автоматически. :-)\r\n\r\n'),
(14, 'dater', 'dater', 3, 4, 3, 1, '**DaterComponent**\r\n\r\nКомпонент приложения, додступный через Yii::app()->dater. Содержит функции работы с датами.\r\n\r\n- `public function formFormat(\$value)`\r\n- `public function readableFormat(\$value)`\r\n- `public function isDbDate(\$value)`\r\n- `public function datetime()` - возвращает `date(''Y-m-d H:i:s'')`\r\n\r\n'),
(15, 'text', 'text', 5, 6, 3, 1, '**TextComponent**\r\n\r\nКомпонент приложения, додступный через Yii::app()->text. Содержит функции форматирования текста.\r\n\r\n- `public static function cut(\$text, \$length, \$delim = ''., -:;'', \$tail= \"\")` - обрезает текст\r\nдо заданного количества символов и в конце ставит `\$tail`\r\n- `public static function translit(\$string)` - транслитерирует текст\r\n- `function antimat(\$string, \$replace = \"<font color=red>цетзура</font> \")` - удаляет не цензурные\r\nвыражения из текста, вместо них вставляет \$replace\r\n- `public function lipsumParagraphs(\$count = 0, \$words = 0, \$loremIpsumFirst = true, \$wrapperTag = ''p'')` -\r\nГенерирует заданное колличество паракрафов с текстом.\r\n- `public function lipsumWords(\$count = 0, \$loremIpsumFirst = true)` - Генерирует заданное колличество слов\r\n\r\n'),
(16, 'componentInModule', 'componentInModule', 9, 10, 3, 1, '**ComponentInModuleBehavior**\r\n\r\nПо умолчанию это поведение имеют классы InputWidget, JuiInputWidget, Portlet, JuiWidget\r\n\r\nПосле того как отработает `parent::init();` станут доступны следующие поля:\r\n\r\n- Путь до ассетов модуля: `\$this->assets`\r\n- Модуль в котором находится видежт: `\$this->module`\r\n- Метод `\$this->createUrl()` алиас `Yii::app()->controller->createUrl()`\r\n'),
(17, 'metaTags', 'metaTags', 11, 12, 3, 1, '**MetaTagBehavior**\r\n\r\nСохарняет метатеги и предоставляет к ним доступ\r\n'),
(18, 'naming', 'naming', 15, 16, 3, 1, '#Стандарты именования и кодирования\r\n\r\n**Кодирование**\r\n\r\n- Необходимо использовать стандарт [ZEND](http://framework.zend.com/manual/ru/coding-standard.html), за исключением 2 моментов:\r\n- Для имен переменных не используется «верблюжий» регистр.\r\n- Начальные и конечные фигурные скобки(функций, if, swich, for, foreach, …) должны\r\nрасполагаться на новой строке.\r\n- Имена классов не должны начинаться с префикса «С», т.к. с него начинаются классы фреймворка.\r\n- Ограничение на длину строки кода: 120 символов\r\n- Отступ между функциями 2 пустых строки\r\n- Любые решения при разработке, которые вызывают сомнения или трудности, нужно\r\nсогласовывать с другими программистами: звонить, писать, обсуждать, советоваться.\r\nПри необходимости можно организовать «Мозговой Штурм» или «Парное Программирование».\r\n\r\n\r\n\r\n**Создание Базы Данных**\r\n\r\n- Запрещается использовать тип движка `MyIsam`. Необходимо использовать `InnoDb` с реализацией внешних ключей.\r\n- Кодировка всех таблиц БД – `utf8`\r\n- Каждое поле таблицы должно содержать комментарий, на их основе появляются лэйблы у форм и списков.\r\n- Комментарий не должен содержать сокращений и должен подробно описывать содержание того или иного поля БД (вместо «Название» - «Название новости»)\r\n- Если логика поля слишком сложна, для описания в комментариях, необходимо воспользоваться механизмом hint-подсказок генератора форм.\r\n- Таблицы и поля именуются в нижнем регистре, через подчеркивание.\r\n- Название полей таблиц БД не должно содержать само название таблицы, пример таблица пользователи users:\r\nНе правильно: `user_id, user_first_name, user_last_name`\r\nПравильно: `id, first_name, last_name`\r\n- Старайтесь для большинства таблиц использовать первичный ключ с названием `id`\r\n- Поле для сохранения порядка всегда именуется `order`\r\n- Поле хранящее алиас для подставления в `URL` всегда именуется `alias`\r\n\r\n\r\n**Именование классов**\r\n\r\n- Название модели должно быть в единственном числе.\r\n- Названия контроллеров и форм содержат название соответствующей модели и должны быть описаны в единственном числе: {modelId}Controller, {modelId}AdminController.\r\n- Директории модуля создаются в нижнем регистре, за исключением если название директории не содержит несколько слов, как например следующая папка /views/documentAdmin.\r\n\r\n'),
(19, 'directoryStructure', 'directoryStructure', 17, 18, 3, 1, '#Структура директорий\r\n\r\nВместе с Проектной документацией должны быть переданы файлы относящиеся к проекту.\r\n\r\n\r\n**Файлы проекта должны распологатся в следующих директориях:**\r\n\r\n- `/assets` — папка для автоматической публикации статических ресурсов модулей ПО и фреймворка;\r\n- `/css` — стили сайта;\r\n- - `/css/admin` - стили админ-панели\r\n- - `/css/site` — стили конкретного проекта\r\n- `/img` — картинки макета сайта;\r\n- - `/img/admin` — картинки ПУ;\r\n- - `/img/site` — картинки  ПО;\r\n- `/js` — javascript скрипты;\r\n- - `/js/admin` -  javascript скрипты  админ-панели\r\n- - `/js/plugins` — содержит плагины в каждой отдельной папке\r\n- - `/js/site` — javascript скрипты конкретного проекта\r\n- `/protected` —папка с ограниченными правами доступа.\r\n- - `/protected/commands` — консольные команды приложения, например скрипты которые работаю по cron;\r\n- - `/protected/components` — компоненты  приложения;\r\n- - `/protected/extensions` — сторонние расширения фреймворка;\r\n- - `/protected/libs` — содержит библиотеки, само ядро фреймворка yii, библиотеку для работы с почтой, библиотека для работы с excel и т.д.;\r\n- - `/protected/messages` — перевод общих слов и фраз на различные языки;\r\n- - `/protected/modules` – модули;\r\n- - `/protected/tests` — тесты ПО.\r\n- - `/protected/views/layouts` — шаблоны верстки. Частичные шаблоны, такие как шапка сайта и подвал сайта должны начинаться с прочерка _header.php, _footer.php;\r\n- `/upload` — папка для загрузки на сервер фалов  пользователями.\r\n- `/index.php` — единая точка входа приложения, обрабатывает все запросы к сайту за исключением статических файлов (js, images,css).\r\n- `/modules` — содержит модули в каждой отдельной папке\r\n\r\n**Ниже представлен пример файлов структуры ПО «Документы»:**\r\n\r\n- `/documents/controllers` — контроллеры модуля;\r\n- - `/documents/controllers/DocumentAdminController` — контроллер модуля, в котором описаны действия для ПУ;\r\n- - `/documents/controllers/DocumentController` — контроллеры модуля,  в котором описаны действия для публичной части сайта;\r\n- `/documents/components` – компоненты\r\n- `/documents/forms` — формы модуля;\r\n- `/documents/messages` — содержит переводы если ПО поддерживает несколько языков;\r\n- `/documents/data` – содержит документацию и дамп нужной части базы;\r\n- `/documents/models` — модели модуля;\r\n- `/documents/portlets` – содержит портлеты(виджеты) модуля\r\n- `/documents/views` — скрипты видов модуля;\r\n- - `/documents/views/document` — скрипты видов для клиентской части ПО;\r\n- - `/documents/views/documentAdmin` - скрипты видов для ПУ;\r\n- - `/documents/views/documentAdmin/create.php` — добавление документа;\r\n- - `/documents/views/documentAdmin/manage.php` — управление документами;\r\n- - `/documents/views/documentAdmin/update.php` — редактирование документа;\r\n- - `/documents/views/documentAdmin/view.php` — просмотр документа;\r\n- - `/documents/views/document/index.php` — список документов на сайте;\r\n- - `/documents/views/document/view.php` — просмотр документа на сайте;\r\n- `/documents/DocumentsModule.php` — основной класс модуля;\r\n\r\n'),
(20, 'mvc', 'mvc', 19, 20, 3, 1, '#Написание основных компонентов (Моделей, Видов, Контроллеров, Виджеты и Форм)\r\n\r\n##Особенности написания Контроллеров\r\n\r\n- Контроллер выполняющий действия ПУ должен наследоваться от класса AdminController.\r\n- Контроллер выполняющий действия публичной части проекта должен наследоваться от класса BaseController.\r\n- Каждый контроллер должен содержать метод actionsTitles, который возвращает массив с описанием действий.\r\n    Это нужно для:\r\n    1. Логирования действий происходящих на сайте.\r\n        Построения верхнего меню ПУ (из самых используемых Администратором сайта модулей).\r\n    2. Для разграничения прав доступа, на основе построенных заголовков создаются операции и задачи.\r\n    3. Заголовок страницы, берется из них, если если не будет задан иной.\r\n\r\nПример:\r\n\r\n~~~\r\n[php]\r\npublic static function actionsTitles()\r\n{\r\n    return array(\r\n        \"View\"   => \"Просмотр документа\",\r\n        \"Create\" => \"Добавление документа\",\r\n        \"Update\" => \"Редактирование документа\",\r\n        \"Delete\" => \"Удаление документа\",\r\n        \"Manage\" => \"Управление документами\",\r\n    );\r\n}\r\n~~~\r\n\r\n##Особенности написания View\r\n\r\n- Представления для публичной части могут быть различными, но они не должны содержать бизнес-логики. Вся бизнес-логика должна быть определена в моделях и контроллерах.\r\n- View скрипты не должны содержать в себе css и js код. Этот код должен находиться в js и css файлах, а файлы располагаться в директории assets текущего модуля.\r\n\r\n##Особенности написания Model\r\n\r\n- Модель, которая связана с таблицей в БД, должна наследоваться от класса ActiveRecordModel. Для составления модели необходимо использовать базовые методы и возможности (например такие как: валидатор, scopes, события которые форматируют дату в читабельный вид, и т.д.)\r\n- Модель имеющая поля, которые являются файлами, загружаемыми на сервер,\r\nкоторые задаются константами, имена констант строятся по принципу\r\n`UPLOAD_DIR_{some} (UPLOAD_DIR_DOCUMENTS = ''upload/news/documents'', UPLOAD_DIR_PHOTOS = ''upload/news/photos'');`\r\nПри этом константа `UPLOAD_DIR = ''upload/news''` должна быть определена обязательно.\r\n- Загрузка файлов на сервер должна быть описана на основе базового класса модели. Для этого нужно описать поля в модели:\r\n\r\n~~~\r\n[php]\r\npublic function uploadFiles()\r\n{\r\n    return array(\r\n        ''photo'' => array(\r\n            ''dir'' => self::FILES_DIR\r\n        )\r\n    );\r\n}\r\n~~~\r\n\r\n- Чтобы избежать написания лишних запросов к БД в моделях должны быть описаны связи с таблицами в методе relations,.\r\n- Значения по умолчанию, размеры контейнеров, таймауты и сообщения пользователям должны быть определены константами, например:\r\n`const STATUS_ACTIVE  = ''active'';\r\nconst STATUS_NEW     = ''new'';\r\nconst STATUS_BLOCKED = ''blocked'';\r\nconst GENDER_MAN   = \"man\";\r\nconst GENDER_WOMAN = \"woman\";\r\nconst MAX_AGE = 80;`\r\n- Если предусмотрен адрес просмотра, редактирования объекта модели,\r\n    то во View не дублируется адрес, а модель должна содержать\r\n    метод `getHref, getUpdateHref, getDeleteHref.`\r\n\r\n\r\n\r\n##Особенности написания Форм\r\n\r\n- Если на сайте определен единый дизайн для форм ввода, с целью исключения дублирования\r\nразметки формы, должен использоваться встроеннымй механизм Yii -\r\n[построитель форм](http://yiiframework.ru/doc/guide/ru/form.builder).\r\n- Так же можно использовать механизм [вложенных форм](http://yiiframework.ru/doc/guide/ru/form.builder)\r\n\r\n**Пример создания документа в ПУ**\r\n\r\nВ контроллере:\r\n~~~\r\n[php]\r\npublic function actionCreate()\r\n{\r\n    \$model = new Document;\r\n    \$form = new BaseForm(''documents.DocumentForm'', \$model);\r\n    if(isset(\$_POST[''Document'']))\r\n    {\r\n        \$model->attributes = \$_POST[''Document''];\r\n        if(\$model->save())\r\n        {\r\n            \$this->redirect(array(''view'', ''id'' => \$model->id));\r\n        }\r\n    }\r\n    \$this->render(''create'', array(\r\n        ''form'' => \$form,\r\n    ));\r\n}\r\n//documents.DocumentForm - это форма документа которая находится по адреcу protected/modules/documents/forms/DocumentForm.php\r\n~~~\r\n\r\nВ `create.php`:\r\n\r\n~~~\r\n[php]\r\necho \$form\r\n~~~\r\n\r\nВ форме следующий код:\r\n~~~\r\n[php]\r\nreturn array(\r\n    ''activeForm'' => array(\r\n        ''id'' => ''document-form''\r\n    ),\r\n    ''elements'' => array(\r\n        ''is_published'' => array(''type'' => ''checkbox'')\r\n        ''name''         => array(''type'' => ''text''),\r\n        ''desc''         => array(''type'' => ''editor''),\r\n        ''date_publish'' => array(''type'' => ''date''),\r\n    ),\r\n    ''buttons'' => array(\r\n        ''submit'' => array(''type'' => ''submit'', ''value'' => \$this->model->isNewRecord ? ''Добавить'' : ''Сохранить'')\r\n    )\r\n);\r\n~~~\r\n\r\n**Шаблоны вывода форм:**\r\n\r\nЕсть 2 шаблона вывода форм\r\n\r\n- клиентский: `protected/views/layouts/_form`.\r\n- административный: `protected/views/layouts/_adminForm`\r\n\r\nОни нужны для того чтобы:\r\n\r\n- Унифицировать дизайн форм\r\n- Удобно добавлять новые виджеты\r\n- Удобно подменять один виджет другим\r\n\r\n\r\n##Написание Виджетов и прочих компонентов\r\n\r\nПри использовании архитектуры приложения с множеством модулей,\r\nстановится сложно найти какой компонент принадлежит какому модулю.\r\nТак же компоненты должны иметь возможность перемещения между модулями, без их переписывания.\r\n\r\nПоэтму следует придерживаться следующих правил написания компонентов внутри модуля.\r\n\r\n- Обращение к родительскому модулю: `\$this->module`\r\n- Обращение к `assets` родительского модуля: `\$this->assets`\r\n\r\nЭтот функционал осуществляется поведением: `ComponentInModuleBehavior`'),
(21, 'cooperation', 'cooperation', 21, 22, 3, 1, '#Совместная работа над проектом\r\n\r\nЕсли над проектом трудится более одного человека, то использование следующих\r\nинструментов может существенно увеличить скорость и простоту разработки.\r\n\r\n\r\n\r\n**Порядок внесения изменений в БД**\r\n\r\n- Все изменения в структуре БД делаются через [миграции](http://yiiframework.ru/doc/guide/ru/database.migration).\r\n- Если миграция ушла в репозиторий и запускалась при этом нормально, исправлять её нельзя. Считайте, что вся команда её уже применила. Корректировки в этом случае делаются новой миграцией.\r\n- Если миграция ушла в репозиторий и не запускалась при этом нормально, её необходимо поправить и как можно быстрее (именно ту миграцию, которая не применяется).\r\n- Если используется `MySQL`, указывайте `engine` и `collation`. Умолчания не сервере могут отличаться.\r\n- Ни в коем случае не стоит лезть в базу руками в обход миграций.\r\n- Для удобного использования миграций существует `gii` компонент для их генерации. Использование его описано ниже.\r\n- Для применения миграций используйте расширение `WebShell`. Использование его описано ниже.\r\n\r\n\r\n**Gii Migrate Generator**\r\n\r\nПо адресу `/gii` можно найти генератор миграций - `Migrate Generator`.\r\n\r\nРаботает он следующим образом:\r\n\r\n- Редактируете базу в любой программе для арботы с базами данных: (NaviCat, Workbanch)\r\n- Вместо сохранения перейдите на вкладку SQL Preview\r\n- Скопируйте оттуда код и вставьте в генератор миграций\r\n- Нажмите предпросмотр, а затем генерацию миграции.\r\n\r\n> **Внимание:** Для создания 2-х миграций подряд, вам придется перейти по ссылке `Migrate Generator` еще раз.\r\n\r\n\r\n**WebShell**\r\n\r\nПо адресу `/webshell` можно найти специальную консоль.\r\nВ этой консоли доступны комманды консольногонго `Yii` приложения.\r\n\r\nНапример `yiic migrate up` - применит миграции\r\n\r\nК сожалению через `WebShell` пока не доступен интерактивный режим.\r\n\r\nПодробное руководство по консольным коммандам `Yii` вы можете найти [здесь](http://yiiframework.ru/doc/guide/ru/topics.console)\r\n\r\n\r\n**Редактирование таблицы стилей**\r\n\r\n- В ходе разработки Программист вправе дополнять таблицу CSS стилей.\r\n- Все дополнения сохраняются отдельным файлом, с именем extra.css,\r\nи по окончании разработки передаются верстальщику для анализа недоработок и ошибок.\r\n\r\n'),
(22, 'activeRecordModel', 'activeRecordModel', 29, 30, 3, 1, 'activeRecordModel'),
(23, 'baseForm', 'baseForm', 31, 32, 3, 1, '**BaseForm**\r\n\r\n- Конструктор `public function __construct(\$config, \$model = null, \$parent = null)`\r\nможет принимать сокращенный алиас конфигурационного файла в виде ''{module_class}.{form_name}''\r\nлибо массив конфигурации формы\r\n- `public static function getFullAlias(\$alias)` возвращает полный алиас по сокращенному\r\n- `public static function getFormConfig(\$alias)` принимает сокращенный алиас\r\nи возвращает массив с настройками. Если вместо алиаса отдать массив, то будет возвращен он же.\r\n- Если форма была создана из административного контроллера, то шаблоном для вывода каждого элемента,\r\nбудет служить `//layouts/_adminForm.php` иначе `//layouts/_form.php`\r\n\r\n\r\n###Hint-подсказки\r\nЧто бы вывести подсказку для данного атрибута, достаточно в конфигурации формы добавить параметр hint\r\nПример:\r\n~~~\r\n[php]\r\n''alias'' => array(\r\n    ''type''   => ''alias'',\r\n    ''source'' => ''title'',\r\n    ''hint''   => ''Этот параметр будет использован для построения красивого URL.\r\n                 Он генерируется на основании названия, однако до сохранения его можно изменить.\r\n                 После сохранения изменить значение этого поля будет невозможно.''\r\n),\r\n~~~\r\n'),
(24, 'gridView', 'gridView', 33, 34, 3, 1, '#Компонент GridView\r\n\r\nЭтот стандартный компонент `yii`, который расширен функциями:\r\n- Drag&Drop сортировки\r\n- Форматирования дат\r\n- Массового удаления записей\r\n- Изменения количества выводимых на страницу записей\r\n\r\n> **Примечание:**\r\nДля административной панели используется компонент `AdminGrid`.\r\nМетоды настройки у него такие же, как у компонента `GridView`\r\n\r\n##Drag&Drop Сортировка\r\n\r\nДля реализации обычной сортировки (записей между собой, либо записей\r\nпринадлежащих какой-то категории) нужно выполнить следующие шаги:\r\n\r\n- Использовать класс `GridView` с параметром `sortable=>true`\r\n- Добавить в модель поведение:\r\n~~~\r\n[php]\r\n''sortable''    => array(\r\n    ''class''=> ''ext.sortable.SortableBehavior''\r\n),\r\n~~~\r\n- В методе `search` модели установить поле по которому нужно сортировать:\r\n`\$criteria->order = \$alias.''.order DESC'';`\r\n\r\n##Drag&Drop Сортировка в отношении Many_Many\r\n\r\nБывает необходимо хранить порядок сортировки для каждой категории, при условии, что объекты\r\nпринадлежат категории через `Many_Many` отношение.\r\n\r\nВ таком случае в промежуточной таблице заводится поле `order`\r\n\r\n- Использовать класс `GridView` с параметром `sortable=>true`\r\n- Добавить в модель поведение:\r\n~~~\r\n[php]\r\n''sortable''    => array(\r\n    ''class''=> ''ext.sortable.SortableBehavior''\r\n),\r\n~~~\r\n- В методе `search` модели установить поле по которому нужно сортировать:\r\n`\$criteria->order = \$alias.''.order DESC'';`\r\n\r\n\r\n##Массовое удаление\r\n\r\n- `mass_removal=>true`\r\n\r\n##Подсказка о работе фильтров\r\n\r\n- `filter_hint=>''Some text''`\r\n\r\n##Вывод даты\r\n\r\nДля вывода даты предусмотрена специальный класс колонки `DateColumn` ().\r\nОна позволяет выводить даты в заданном формате, а так же предоставляет\r\nвозможность фильтрации записей по временному диапазону.\r\n\r\n> **Примачание:** Пользовательский интерфейс не позволит быть начальной дате больше чем конечной.\r\n\r\nИспользование:\r\n~~~\r\n[php]\r\narray(\r\n     ''class''=>\"DateColumn\",\r\n     ''name''=>''date'',\r\n),\r\n~~~\r\n\r\nОтправляются данные на сервер в виде `_{name}_start` и `_{name}_end` где `name` - имя атрибута.\r\nДля возможности фильтрации по временному диапазону, нужно добавить в метод `search` модели:\r\n\r\n~~~\r\n[php]\r\n\$criteria = \$this->addTimeDiapasonCondition(\$criteria, \$attribute_name);\r\n~~~\r\n\r\n##Создание колонки со сложным клиентским поведением\r\n\r\nДля создания колонки со сложным клиентским поведением существует базовый плагин\r\n`/js/packages/adminBaseClasses/gridBase.js` подключается автоматически.\r\nЭтот плагин берет на себя работу по синхронизации с плагином `yiiGridView`,\r\nа так же предоставляет простой API для реализации на его основе своих плагинов.\r\n\r\nПлагин изначально вызывает метод `_initHandlers` используйте его для инициализации\r\nсвоих скриптов. После `ajaxUpdate`(метод `yiiGridView`) `_initHandlers` будет вызван\r\nповторно, поэтому нет необходимости использовать live или delegate.\r\n\r\nНа одну таблицу можо вешать неограниченное количество плагинов основанных на CmsUI.gridBase.\r\nНо, т.к. мы зависим от yiiGridView, то инициализация этих плагинов, должна произойти\r\nпосле инициализации yiiGridView\r\nТ.е. если вы хотите проинициализировать плагин из какой-либо колонки, то для этого в\r\nкомпоненте GridView предусмотренно событие onRegisterScript.\r\nВ методе init колонки, используйте \$this->grid->onRegisterScript = array(\$this, ''registerScript'');\r\nи в методе registerScript вашей колонки регистрируйте любые скрипты.\r\n\r\n'),
(25, 'webModule', 'webModule', 35, 36, 3, 1, '\r\n**WebModule**\r\n\r\n- `public function assetsUrl()` - возвращает путь до опубликованной директории assets текущего модуля.\r\n- `public static function getShortId()` - возвращает короткий id модуля,\r\n    его можно использовать для обращение к модулю через `Yii::app()->getModule(\$short_id)`\r\n'),
(26, 'formWidgets', 'formWidgets', 39, 40, 3, 1, '#Виджеты для форм:\r\n\r\nВсе виджеты для форм находятся в директории `application.components.formWidgets`\r\n\r\n##Список алиасов\r\n\r\nСписоки алиасов ядра прописываются в файлах: `AdminFormInputElement` и `ClientFormInputElement`\r\n\r\nАлиас используемый в форме | Реальный виджет\r\n---------------------------|---------------------------------------------\r\n`checkbox`                 | `IphoneCheckbox`\r\n`alias`                    | `AliasField`\r\n`captcha`                  | `Captcha`\r\n`all_in_one_input`         | `EMultiSelect`\r\n`multi_select`             | `AllInOneInput`\r\n`multi_autocomplete`       | `MultiAutocomplete`\r\n`date`                     | `FJuiDatePicker`\r\n`editor`                   | `TinyMCE`\r\n`autocomplete`             | `zii.widgets.jui.CAutoComplete`\r\n`meta_tags`                | `main.portlets.MetaTags`\r\n`file_manager`             | `fileManager.portlets.Uploader`\r\n\r\n\r\n##Общий список виджетов\r\n\r\nВиджет                              | Зачем нужен\r\n------------------------------------|---------------------------------------------------------------------------\r\n`checkbox`                          | Красивый чекбокс. [источник](http://awardwinningfjords.com/2009/06/16/iphone-style-checkboxes.html)\r\n`multi_select`                      | Функциональный мультиселект. [источник](http://quasipartikel.at/multiselect/)\r\n`multi_autocomplete`                | Автокомплит с возможностью выбора нескольких вариантов, мультиселект для большого объема данных\r\n`alias`                             | Автогенерация `url` и алиасов\r\n`chosen`                            | Украшение выпадающего списка\r\n`date`                              | `jQuery.UI.DatePicker` с возможностью задания диапазона дат.\r\n`editor`                            | Редактор текста\r\n`autocomplete`                      | `jQuery.UI.Autocomplete`\r\n`file_manager`                      | Загрузка серии файлов\r\n`all_in_one_input`                  | Редактирование текстовой информации с разделителями(например '';'')\r\n`main.portlets.MetaTags`            | Добавление метатегов к записям\r\n\r\n\r\n##Основные виджеты\r\n\r\n- **alias**\r\n\r\nДобавляет `disabled` поле в форму, автоматически заполняемую текстом из поля `source`, транслитерируя\r\nперед этим текст из поля `source`. Нетекстовые символы и прочий мусор удаляются\r\n\r\nОбязательный параметр `source` - имя атрибута источника\r\n\r\nСкрытое поле выводится для того, что бы сохранить валидацию, т.к. `jquery.serialize и гнорирует `disabled` поля\r\n\r\nПример использования:\r\n\r\n~~~\r\n[php]\r\n''title'' => array(''type'' => ''text''),\r\n''url''   => array(''type'' => ''alias'', ''source'' => ''title''),\r\n~~~\r\n\r\n- **file_manager**\r\n\r\nПодробное описание находится в модуле [fileManager](/index.php/fileManager)\r\n\r\n- **chosen**\r\n\r\nЭто просто украшение, настройки абсолютно такие же, как и при использование `dropdownlist`\r\n\r\n- **main.components.AllInOneInput**\r\n\r\nИспользуется для редактирования текста с разделителями. Вместо строки выводит набор элементов\r\nкоторым можно удалять, сортировать, добавлять новые. При этом на сервер отправляется всегда\r\nсобранная из элементов строка через заданный разделитель.\r\n\r\n- **multi_autocomplete**\r\n\r\nФункциональный мультиселект для работы с большими объемами данных. Работает на базе jQuery.UI.Autocomplete\r\n\r\n~~~\r\n[php]\r\n''categories'' => array(\r\n    ''type''     => ''multi_select'',\r\n    ''selected'' => ''all_relevant_products'',\r\n    ''url''      => ''/products/productAdmin/productsAsJson''\r\n),\r\n~~~\r\n\r\n- **multi_select**\r\n\r\nФункциональный мультиселект: поддерживает сортировку, фильтрацию, массовое добавление/удаление\r\n\r\n~~~\r\n[php]\r\n''categories'' => array(\r\n    ''type''     => ''multi_select'',\r\n    ''items''    => CHtml::listData(Category::model()->findAll(), ''id'', ''title''),\r\n    ''onchange'' => \"js:function() {}\",\r\n    ''hint''     => ''Текст который будет выведен во всплывающей подсказке''\r\n),\r\n~~~\r\n\r\n- **main.portlets.MetaTags**\r\n\r\nДобавляет 3 `input''а` в форму редактирования для того что бы ввести ключевые слова, описание и тайтл.\r\n\r\n\r\n#Создание своих виджетов\r\n\r\nВсе виджеты наследуют классы `InputWidget` или `JuiInputWidget`\r\n\r\nДля всех `JuiInputWidget` доступны дополнительные методы рендеринга:\r\n\r\n- `public function renderDialog(\$view, \$params = array(), \$return = false)` - Выводит ссылку\r\nпо нажатию на которую отображается диалоговое окно с отрендеренным контентом. Параметры для\r\nдиалогового окна можно задать в `\$params[''dialogOptions'']`. Набор параметров аналогичен `CJuiDialog`\r\nтекст ссылки задается через `\$params[''dialogOptions''][''title'']`;\r\nОсновной особенностью данного метода является то, что по умолчанию диалоговое окно в `DOM`-дереве\r\nявляется дочерним элементом `body`, поэтому вывести часть формы в диалоговое окно невозможно,\r\nт.к. при сабмите эта часть формы будет находиться вне тега `form`. Однако метод `renderDialog`\r\nдобавляет дополнительную логику, которая изначально помещает выведенный `html` внутрь `form`,\r\nпри открытии диалогового окна перемещает его из `form` в диалоговое окно,\r\nи после закрытия диалогового окна, так же возвращает внутрь `form`.\r\nТаким образом во время `submit`, выведенный `html` будет внутри `form`, хотя работать с ним\r\nпользователь будет в модальном окне.');
");
		
		if(Yii::app()->hasComponent('cache'))
		{
			Yii::app()->getComponent('cache')->flush();
			echo "Cache flused\n";
		}
		
		$this->clearAssets();
	}
	
	private function clearAssets()
	{
		$path = Yii::app()->getComponent('assetManager')->getBasePath();
		$this->clearDir($path);
		echo "Assets clear\n";
	}

	private function clearDir($folder, $main=true)
	{
		if(is_dir($folder))
		{
			$handle = opendir($folder);
			while($subfile = readdir($handle))
			{
				if($subfile == '.' || $subfile == '..')
					continue;
				if(is_file($subfile))
					unlink("{$folder}/{$subfile}");
				else
					$this->clearDir("{$folder}/{$subfile}", false);
			}
			closedir($handle);
			if(!$main)
				rmdir($folder);
		}
		else
			unlink($folder);
	}

	public function down()
	{
		echo "m120208_234523_docs does not support migration down.\n";
		return false;
		
		$this->execute("");
	}

	/*
	// Use safeUp/safeDown to do migration with transaction
	public function safeUp()
	{
	}

	public function safeDown()
	{
	}
	*/
}
